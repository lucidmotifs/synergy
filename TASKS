TASK List

** Main **

- -- Build menu that displays selectable options to run.  --
- Search for module that handles python console input/output well.
- Initially we should create the ability to run tests.
- These tests are both useful for game reasons, and also as unit testing
the actual code.

** Abilities **

- Create structured object that represents the in-game 7 active / 7 passive
/ 1 active auxiliary / 1 passive auxiliary paradigm. (Deck)
- Allow outside observers to use query the AbilityList with simple requests
such as has_ability and get_ability (which return an ability object)
- AbilityList should parse loading/unloading of abilities to do sanity checks.
For example, only 7 actives and only one elite active/passive etc.
- Define STATES, BENEFITS, DAMAGES etc. as sub-object of Affect so the data
can be read from ability data loaded in by JSON
- Change categorisation of abilities to use an Enum defined in the abilities
file
- Create a list of 'keys' for each ability type within an ability list. Which
would allow us to store all abilities in a single list. Alternatively, see
how neater using an Enum to organise ability types is compared to the current
method of using string.

** Player ** (Potentially 'Avatar')

- Add Player object with basic methods
- The player should be created as sort of a 'hosting' for several other objects
(stats, abilities, etc.) that creates a 'build'. The reason to not specifically
a Build object is because a) a build is a 'wish list' or at least an 'option'
rather than a 'state'. Builds can be switched to, or aimed for - the Player is
the reality right now. Potential states VS actual states.
- At each stage, a players objects should be sanity checked that the set-up is
valid so that subroutines can make assumptions (like, have this elite/have
other elite only one should return true).

** Testing **

** Deck **
- Address the TODO above Deck.add to simplify how abilities are added.
- Potentially abstract the elite pop code into AbilityList so it can be called
from Deck as well as for Tree inside Wheel.


** Wheel **

- Build ability section 'key chains' to improve search time for abilities.
- Create method to extract the 'tree' property of a skill, and create a new
ability list if one doesn't exist.
- Take a data dump of every available ability (excluding auxillary) and then
go through each ability add it to an ability list (encapsulated by 'tree')
- Create weapons data. Include an ID for each weapon that can be linked to from
the skills. Include auxillaries.

** DataStore **

We need a singleton object that is in charge of loading and maybe even
storing data. This alows us to use json or SQL (in future) and abstracts the
loading of game data.
